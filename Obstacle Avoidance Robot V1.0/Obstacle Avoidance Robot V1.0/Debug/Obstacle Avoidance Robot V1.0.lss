
Obstacle Avoidance Robot V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ab  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095b  00000000  00000000  0000151b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000adc  00000000  00000000  00001e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000852  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bde  00000000  00000000  0000353e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_1>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_2>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{

}
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret

00000098 <__vector_1>:
}
/*******************************************************ISR INT_0********************************************************/


ISR (INT0_vect)
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	4f 93       	push	r20
  a8:	5f 93       	push	r21
  aa:	6f 93       	push	r22
  ac:	7f 93       	push	r23
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
	
	if (ptrf_INT_0 != NULL)
  ba:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <ptrf_INT_0>
  be:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <ptrf_INT_0+0x1>
  c2:	30 97       	sbiw	r30, 0x00	; 0
  c4:	09 f0       	breq	.+2      	; 0xc8 <__vector_1+0x30>
	{
		ptrf_INT_0();
  c6:	09 95       	icall
		

	}
}
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_2>:

ISR (INT1_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	if (ptrf_INT_1 != NULL)
	{
		//ptrf_INT_1();
		
	}
	car_flag = 1 ;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_3>:

ISR (INT2_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	if (ptrf_INT_2 != NULL)
 12a:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ptrf_INT_2>
 12e:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ptrf_INT_2+0x1>
 132:	30 97       	sbiw	r30, 0x00	; 0
 134:	09 f0       	breq	.+2      	; 0x138 <__vector_3+0x30>
	{
		ptrf_INT_2();
 136:	09 95       	icall
	}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_9>:
void TIMER_2_INT(){
	sei();
	set_bit(TIMSK,TOIE2);
	TIMER_2_init(NORMAL_MODE);
	TIMER_2_setIntialValue(0);
	TIMER_2_start(PRECALER_1);
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
 17c:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <Timer1_OVF_Fptr>
 180:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <Timer1_OVF_Fptr+0x1>
 184:	30 97       	sbiw	r30, 0x00	; 0
 186:	09 f0       	breq	.+2      	; 0x18a <__vector_9+0x30>
 188:	09 95       	icall
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_5>:
}




ISR(TIMER2_OVF){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
	if(car_flag == 1){
 1c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	e9 f5       	brne	.+122    	; 0x248 <__vector_5+0x9c>
		
		if (ovf < mode_ovf ){
 1ce:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ovf>
 1d2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <ovf+0x1>
 1d6:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <ovf+0x2>
 1da:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <ovf+0x3>
 1de:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <mode_ovf>
 1e2:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <mode_ovf+0x1>
 1e6:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <mode_ovf+0x2>
 1ea:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <mode_ovf+0x3>
 1ee:	84 17       	cp	r24, r20
 1f0:	95 07       	cpc	r25, r21
 1f2:	a6 07       	cpc	r26, r22
 1f4:	b7 07       	cpc	r27, r23
 1f6:	64 f4       	brge	.+24     	; 0x210 <__vector_5+0x64>
			ovf++;
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	a1 1d       	adc	r26, r1
 1fc:	b1 1d       	adc	r27, r1
 1fe:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <ovf>
 202:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <ovf+0x1>
 206:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <ovf+0x2>
 20a:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <ovf+0x3>
 20e:	1c c0       	rjmp	.+56     	; 0x248 <__vector_5+0x9c>
		}
		else if ( ovf == mode_ovf && mode_ovf!=0){
 210:	84 17       	cp	r24, r20
 212:	95 07       	cpc	r25, r21
 214:	a6 07       	cpc	r26, r22
 216:	b7 07       	cpc	r27, r23
 218:	b9 f4       	brne	.+46     	; 0x248 <__vector_5+0x9c>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f0       	breq	.+38     	; 0x248 <__vector_5+0x9c>
			ovf =0 ;
 222:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ovf>
 226:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <ovf+0x1>
 22a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ovf+0x2>
 22e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <ovf+0x3>
			
			if (car_mode < 8)
 232:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <car_mode>
 236:	88 30       	cpi	r24, 0x08	; 8
 238:	20 f4       	brcc	.+8      	; 0x242 <__vector_5+0x96>
			{
				car_mode++;
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <car_mode>
 240:	03 c0       	rjmp	.+6      	; 0x248 <__vector_5+0x9c>
				
			}else{
				car_mode = 1 ;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <car_mode>
			
		}
		
	}
	
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
